/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package agendasencilla;

import javax.swing.table.DefaultTableModel;
import java.sql.*;

/**
 *
 * @author Asus
 */
public class Pantalla extends javax.swing.JFrame {

    public Connection conectar() {
        String usuario = "root";
        String contrasena = "";
        String url = "jdbc:mysql://localhost:3306/agenda";
        Connection con = null;
        try {
            con = DriverManager.getConnection(url, usuario, contrasena);
            salida.setText("Conexión correcta");
            return con;
        } catch (Exception e) {
            salida.setText("Conexión incorrecta");
            return null;
        }
    }

    //modelo para manipular la tabla
    DefaultTableModel modelo;

    /**
     * Creates new form Pantalla
     */
    public Pantalla() {
        initComponents();

        //inicio el modelo para manipular la tabla
        modelo = (DefaultTableModel) tabla.getModel();

        // Mostrar líneas de la tabla
        tabla.setShowHorizontalLines(true);
        tabla.setShowVerticalLines(true);

        // Color de las líneas
        tabla.setGridColor(java.awt.Color.BLACK);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        titulo = new javax.swing.JLabel();
        ldireccion = new javax.swing.JLabel();
        lnombres = new javax.swing.JLabel();
        lapellidos = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        salida = new javax.swing.JTextArea();
        telefono = new javax.swing.JTextField();
        direccion = new javax.swing.JTextField();
        ltelefono = new javax.swing.JLabel();
        apellidos = new javax.swing.JTextField();
        lemail = new javax.swing.JLabel();
        agregar = new javax.swing.JButton();
        consultar = new javax.swing.JButton();
        nombres = new javax.swing.JTextField();
        borrar = new javax.swing.JButton();
        cerrar = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        ListarCiudades = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ListarId = new javax.swing.JButton();
        idInicio = new javax.swing.JTextField();
        idFin = new javax.swing.JTextField();
        BuscarNombre = new javax.swing.JButton();
        BuscarApellido = new javax.swing.JButton();
        BuscarId = new javax.swing.JButton();
        idBuscar = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ciudad = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        ListarCalles = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        ListarCarreras = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        ListarPrefijo = new javax.swing.JButton();
        email = new javax.swing.JTextField();
        prefijo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        nombre = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        apellido = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        ListarAlfa = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        ListarIdPar = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        ListarIdImpar = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        campo = new javax.swing.JTextField();
        ListarCampo = new javax.swing.JButton();

        jLabel6.setText("jLabel6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titulo.setText("Agenda Telefónica");

        ldireccion.setText("Dirección:");

        lnombres.setText("Nombres:");

        lapellidos.setText("Apellidos:");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombres", "Apellidos", "Teléfono", "Dirección", "Email"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        salida.setColumns(20);
        salida.setRows(5);
        jScrollPane2.setViewportView(salida);

        ltelefono.setText("Teléfono:");

        lemail.setText("Email:");

        agregar.setText("Agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        consultar.setText("Consultar");
        consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarActionPerformed(evt);
            }
        });

        borrar.setText("Borrar");
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        cerrar.setText("Cerrar");
        cerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarActionPerformed(evt);
            }
        });

        editar.setText("Editar");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        ListarCiudades.setText("Listar Contactos");
        ListarCiudades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarCiudadesActionPerformed(evt);
            }
        });

        jLabel1.setText("Listar contactos por ciudad");

        jLabel2.setText("Listar contactos por rango");

        ListarId.setText("Listar Contactos");
        ListarId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarIdActionPerformed(evt);
            }
        });

        BuscarNombre.setText("Buscar por nombre");
        BuscarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarNombreActionPerformed(evt);
            }
        });

        BuscarApellido.setText("Buscar por apellido");
        BuscarApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarApellidoActionPerformed(evt);
            }
        });

        BuscarId.setText("Buscar por id");
        BuscarId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarIdActionPerformed(evt);
            }
        });

        jLabel3.setText("ID");

        jLabel4.setText("Listar contactos que viven en calles");

        ListarCalles.setText("Listar Contactos");
        ListarCalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarCallesActionPerformed(evt);
            }
        });

        jLabel5.setText("Listar contactos que viven en carreras");

        ListarCarreras.setText("Listar Contactos");
        ListarCarreras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarCarrerasActionPerformed(evt);
            }
        });

        jLabel7.setText("Listar contactos por prefijo");

        ListarPrefijo.setText("Listar Contactos");
        ListarPrefijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarPrefijoActionPerformed(evt);
            }
        });

        jLabel8.setText("Buscar contacto por nombre o iniciales");

        jLabel9.setText("Buscar contacto por apellido o iniciales");

        jLabel10.setText("Listar contactos alfabéticamente");

        ListarAlfa.setText("Listar Contactos");
        ListarAlfa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarAlfaActionPerformed(evt);
            }
        });

        jLabel11.setText("Listar contactos por id par");

        ListarIdPar.setText("Listar Contactos");
        ListarIdPar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarIdParActionPerformed(evt);
            }
        });

        jLabel12.setText("Listar contactos por id impar");

        ListarIdImpar.setText("Listar Contactos");
        ListarIdImpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarIdImparActionPerformed(evt);
            }
        });

        jLabel13.setText("Listar contactos por campo determinado");

        ListarCampo.setText("Listar Contactos");
        ListarCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarCampoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(BuscarNombre))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(apellido, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(BuscarApellido))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(ListarCalles))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel4)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel8)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel5)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addComponent(jLabel11)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel12)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(ciudad, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ListarAlfa)
                                            .addComponent(ListarCiudades))))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(idInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(idFin, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(ListarId)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(jLabel7))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(63, 63, 63)
                                        .addComponent(prefijo, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(ListarPrefijo))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(41, 41, 41)
                                .addComponent(ListarIdPar)
                                .addGap(53, 53, 53)
                                .addComponent(ListarIdImpar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(ListarCarreras)
                        .addGap(75, 75, 75))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ldireccion)
                                .addGap(18, 18, 18)
                                .addComponent(direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lemail))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(agregar)
                                .addGap(18, 18, 18)
                                .addComponent(editar)
                                .addGap(18, 18, 18)
                                .addComponent(borrar)
                                .addGap(18, 18, 18)
                                .addComponent(consultar)
                                .addGap(18, 18, 18)
                                .addComponent(cerrar))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(122, 122, 122)
                            .addComponent(nombres, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lapellidos)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(ltelefono)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(BuscarId)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel13))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(campo, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(ListarCampo)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(lnombres)
                    .addContainerGap(656, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(titulo)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lapellidos)
                            .addComponent(telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ltelefono)
                            .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ldireccion)
                            .addComponent(direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lemail)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(consultar)
                            .addComponent(borrar)
                            .addComponent(editar)
                            .addComponent(agregar)
                            .addComponent(cerrar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(idInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(idFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ListarId))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ciudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ListarCiudades)))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ListarAlfa)
                            .addComponent(ListarIdPar)
                            .addComponent(ListarIdImpar))
                        .addGap(31, 31, 31)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ListarCampo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BuscarId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BuscarNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(apellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BuscarApellido)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ListarCalles, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ListarCarreras)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prefijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ListarPrefijo)
                        .addGap(414, 414, 414))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(77, 77, 77)
                    .addComponent(lnombres)
                    .addContainerGap(867, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        // TODO add your handling code here:
        Connection con = conectar();
        if (con != null) {
            if (!nombres.getText().isEmpty() && !apellidos.getText().isEmpty() && !telefono.getText().isEmpty() && !direccion.getText().isEmpty() && !email.getText().isEmpty()) {
                String query = "INSERT INTO datos(id,nombres,apellidos,telefono,direccion,email) VALUES (null,'" + nombres.getText() + "','" + apellidos.getText() + "','" + telefono.getText() + "','" + direccion.getText() + "','" + email.getText() + "');";
                try {
                    //preparo la consulta
                    PreparedStatement preparar = con.prepareStatement(query);
                    //ejecuto la consulta luego de prepararla, cuando la consulta es insert, update, delete etc, devuelve un entero con el número de filas afectadas
                    preparar.executeUpdate();
                    salida.setText("Consulta correcta.");
                } catch (SQLException ex) {
                    salida.setText("Error en la consulta.");
                }
            } else {
                salida.setText("No hay datos.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_agregarActionPerformed

    private void consultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultarActionPerformed
        // TODO add your handling code here:
        //limpio la tabla antes de llevar los valores
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            String query = "SELECT * FROM datos;";
            try {
                //preparo la consulta
                PreparedStatement preparar = con.prepareStatement(query);
                //ejecuto la consulta luego de prepararla, como es un select devuelve una lista de tipo ResultSet
                ResultSet resultado = preparar.executeQuery();
                //hago un ciclo para recorrer la lista y ponerla en la tabla de la interfaz
                while (resultado.next()) {
                    modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("direccion"), resultado.getString("telefono"), resultado.getString("email")});
                }
            } catch (SQLException ex) {
                System.out.println("Error en el sql.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_consultarActionPerformed

    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        // TODO add your handling code here:
        Connection con = conectar();
        if (con != null) {
            if (!email.getText().isEmpty()) {
                String query = "DELETE FROM datos WHERE email = '" + email.getText() + "';";
                try {
                    // preparo la consulta
                    PreparedStatement preparar = con.prepareStatement(query);
                    // ejecuto la consulta
                    preparar.executeUpdate();
                    salida.setText("Contacto eliminado correctamente.");
                } catch (SQLException ex) {
                    salida.setText("Error al eliminar el contacto.");
                }
            } else {
                salida.setText("Debes ingresar un email.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_borrarActionPerformed

    private void cerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_cerrarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        // TODO add your handling code here:
        Connection con = conectar();
        if (con != null) {
            if (!nombres.getText().isEmpty() && !apellidos.getText().isEmpty() && !telefono.getText().isEmpty() && !direccion.getText().isEmpty() && !email.getText().isEmpty()) {
                String query = "UPDATE datos SET nombres='" + nombres.getText() + "', apellidos='" + apellidos.getText() + "', telefono='" + telefono.getText() + "', direccion='" + direccion.getText() + "' WHERE email='" + email.getText() + "';";
                try {
                    // preparo la consulta
                    PreparedStatement preparar = con.prepareStatement(query);
                    // ejecuto la consulta
                    preparar.executeUpdate();
                    salida.setText("Contacto actualizado correctamente.");
                } catch (SQLException ex) {
                    salida.setText("Error al actualizar el contacto.");
                }
            } else {
                salida.setText("Ingresa los datos que quieres cambiar.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_editarActionPerformed

    private void ListarCiudadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarCiudadesActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            if (!ciudad.getText().isEmpty()) {
                String query = "SELECT * FROM datos WHERE direccion LIKE '%" + ciudad.getText() + "%';";
                try {
                    PreparedStatement preparar = con.prepareStatement(query);
                    ResultSet resultado = preparar.executeQuery();
                    boolean hayDatos = false;
                    while (resultado.next()) {
                        modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("telefono"), resultado.getString("direccion"), resultado.getString("email")});
                        hayDatos = true;
                    }
                    if (hayDatos) {
                        salida.setText("Contactos listados de " + ciudad.getText() + ".");
                    } else {
                        salida.setText("No hay contactos en " + ciudad.getText() + ".");
                    }
                } catch (SQLException ex) {
                    salida.setText("Error al listar contactos por ciudad.");
                }
            } else {
                salida.setText("Por favor ingresa una ciudad para buscar.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_ListarCiudadesActionPerformed

    private void ListarIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarIdActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            if (!idInicio.getText().isEmpty() && !idFin.getText().isEmpty()) {
                String query = "SELECT * FROM datos WHERE id BETWEEN " + idInicio.getText() + " AND " + idFin.getText() + ";";
                try {
                    PreparedStatement preparar = con.prepareStatement(query);
                    ResultSet resultado = preparar.executeQuery();
                    boolean hayDatos = false;
                    while (resultado.next()) {
                        modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("telefono"), resultado.getString("direccion"), resultado.getString("email")});
                        hayDatos = true;
                    }
                    if (hayDatos) {
                        salida.setText("Contactos listados del " + idInicio.getText() + " al " + idFin.getText() + ".");
                    } else {
                        salida.setText("No se encontraron contactos del " + idInicio.getText() + " al " + idFin.getText() + ".");
                    }
                } catch (SQLException ex) {
                    salida.setText("Error al listar por rango de ID.");
                }
            } else {
                salida.setText("Debes ingresar el ID inicial y el ID final.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_ListarIdActionPerformed

    private void BuscarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarNombreActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            if (!nombre.getText().isEmpty()) {
                String query = "SELECT * FROM datos WHERE nombres LIKE '" + nombre.getText() + "%';";
                try {
                    PreparedStatement preparar = con.prepareStatement(query);
                    ResultSet resultado = preparar.executeQuery();
                    boolean hayDatos = false;
                    while (resultado.next()) {
                        modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("telefono"), resultado.getString("direccion"), resultado.getString("email")});
                        hayDatos = true;
                    }
                    if (hayDatos) {
                        salida.setText("Búsqueda por el nombre de " + nombre.getText() + ".");
                    } else {
                        salida.setText("No se encontraron contactos con el nombre de " + nombre.getText() + ".");
                    }
                } catch (SQLException ex) {
                    salida.setText("Error al buscar por nombre.");
                }
            } else {
                salida.setText("Por favor ingresa un nombre para buscar.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_BuscarNombreActionPerformed

    private void BuscarApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarApellidoActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            if (!apellido.getText().isEmpty()) {
                String query = "SELECT * FROM datos WHERE apellidos LIKE '" + apellido.getText() + "%';";
                try {
                    PreparedStatement preparar = con.prepareStatement(query);
                    ResultSet resultado = preparar.executeQuery();
                    boolean hayDatos = false;
                    while (resultado.next()) {
                        modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("telefono"), resultado.getString("direccion"), resultado.getString("email")});
                        hayDatos = true;
                    }
                    if (hayDatos) {
                        salida.setText("Búsqueda por el apellido de " + apellido.getText() + ".");
                    } else {
                        salida.setText("No se encontraron contactos con el apellido de " + apellidos.getText() + ".");
                    }
                } catch (SQLException ex) {
                    salida.setText("Error al buscar por apellido.");
                }
            } else {
                salida.setText("Por favor ingresa un apellido para buscar.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_BuscarApellidoActionPerformed

    private void BuscarIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarIdActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            if (!idBuscar.getText().isEmpty()) {
                String query = "SELECT * FROM datos WHERE id = " + idBuscar.getText() + ";";
                try {
                    PreparedStatement preparar = con.prepareStatement(query);
                    ResultSet resultado = preparar.executeQuery();
                    boolean hayDatos = false;
                    while (resultado.next()) {
                        modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("telefono"), resultado.getString("direccion"), resultado.getString("email")});
                        hayDatos = true;
                    }
                    if (hayDatos) {
                        salida.setText("Contacto encontrado por el siguiente id: " + idBuscar.getText() + ".");
                    } else {
                        salida.setText("No existe ningún contacto con el siguiente id: " + idBuscar.getText() + ".");
                    }
                } catch (SQLException ex) {
                    salida.setText("Error al buscar por ID.");
                }
            } else {
                salida.setText("Por favor ingresa un ID para buscar.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_BuscarIdActionPerformed

    private void ListarCallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarCallesActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            String query = "SELECT * FROM datos WHERE direccion LIKE '%Cl%';";
            try {
                PreparedStatement preparar = con.prepareStatement(query);
                ResultSet resultado = preparar.executeQuery();
                boolean hayDatos = false;
                while (resultado.next()) {
                    modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("telefono"), resultado.getString("direccion"), resultado.getString("email")});
                    hayDatos = true;
                }
                if (hayDatos) {
                    salida.setText("Contactos listados que viven en calles.");
                } else {
                    salida.setText("No hay contactos que vivan en calles.");
                }
            } catch (SQLException ex) {
                salida.setText("Error al listar contactos que viven en calles.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_ListarCallesActionPerformed

    private void ListarCarrerasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarCarrerasActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            String query = "SELECT * FROM datos WHERE direccion LIKE '%Cra%';";
            try {
                PreparedStatement preparar = con.prepareStatement(query);
                ResultSet resultado = preparar.executeQuery();
                boolean hayDatos = false;
                while (resultado.next()) {
                    modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("telefono"), resultado.getString("direccion"), resultado.getString("email")});
                    hayDatos = true;
                }
                if (hayDatos) {
                    salida.setText("Contactos listados que viven en carreras.");
                } else {
                    salida.setText("No hay contactos que vivan en carreras.");
                }
            } catch (SQLException ex) {
                salida.setText("Error al listar contactos que viven en carreras.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_ListarCarrerasActionPerformed

    private void ListarPrefijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarPrefijoActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            if (!prefijo.getText().isEmpty()) {
                String query = "SELECT * FROM datos WHERE telefono LIKE '%" + prefijo.getText() + "%';";
                try {
                    PreparedStatement preparar = con.prepareStatement(query);
                    ResultSet resultado = preparar.executeQuery();
                    boolean hayDatos = false;
                    while (resultado.next()) {
                        modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("telefono"), resultado.getString("direccion"), resultado.getString("email")});
                        hayDatos = true;
                    }
                    if (hayDatos) {
                        salida.setText("Contactos listados con el prefijo: " + prefijo.getText() + ".");
                    } else {
                        salida.setText("No se encontraron contactos con el prefijo: " + prefijo.getText() + ".");
                    }
                } catch (SQLException ex) {
                    salida.setText("Error al listar contactos por el prefijo.");
                }
            } else {
                salida.setText("Por favor ingresa un prefijo para buscar.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_ListarPrefijoActionPerformed

    private void ListarAlfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarAlfaActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            String query = "SELECT * FROM datos ORDER BY nombres ASC;";
            try {
                PreparedStatement preparar = con.prepareStatement(query);
                ResultSet resultado = preparar.executeQuery();
                while (resultado.next()) {
                    modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("telefono"), resultado.getString("direccion"), resultado.getString("email")});
                }
                salida.setText("Contactos listados alfabéticamente.");
            } catch (SQLException ex) {
                salida.setText("Error al listar contactos por el prefijo.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_ListarAlfaActionPerformed

    private void ListarIdParActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarIdParActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            String query = "SELECT * FROM datos WHERE id % 2 = 0";
            try {
                PreparedStatement preparar = con.prepareStatement(query);
                ResultSet resultado = preparar.executeQuery();
                while (resultado.next()) {
                    modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("telefono"), resultado.getString("direccion"), resultado.getString("email")});
                }
                salida.setText("Contactos listados por ID par.");
            } catch (SQLException ex) {
                salida.setText("Error al listar contactos por el ID par.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_ListarIdParActionPerformed

    private void ListarIdImparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarIdImparActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            String query = "SELECT * FROM datos WHERE id % 2 != 0";
            try {
                PreparedStatement preparar = con.prepareStatement(query);
                ResultSet resultado = preparar.executeQuery();
                while (resultado.next()) {
                    modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString("nombres"), resultado.getString("apellidos"), resultado.getString("telefono"), resultado.getString("direccion"), resultado.getString("email")});
                }
                salida.setText("Contactos listados por ID impar.");
            } catch (SQLException ex) {
                salida.setText("Error al listar contactos por el ID impar.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_ListarIdImparActionPerformed

    private void ListarCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarCampoActionPerformed
        // TODO add your handling code here:
        modelo.setRowCount(0);
        Connection con = conectar();
        if (con != null) {
            if (!campo.getText().isEmpty()) {
                String buscarCampo = campo.getText().trim().toLowerCase();
                if (buscarCampo.equals("id") || buscarCampo.equals("nombres") || buscarCampo.equals("apellidos") || buscarCampo.equals("telefono") || buscarCampo.equals("direccion") || buscarCampo.equals("email")) {
                    String query = "SELECT id," + buscarCampo + " FROM datos;";
                    try {
                        PreparedStatement preparar = con.prepareStatement(query);
                        ResultSet resultado = preparar.executeQuery();
                        
                        // Ayuda con la IA para saber como listar solo el id y el campo determinado
                        // y no salgan las demas columnas vacias o con datos que no son.
                        modelo.setColumnCount(0);
                        modelo.addColumn("ID");
                        modelo.addColumn(buscarCampo);
                        
                        boolean hayDatos = false;
                        while (resultado.next()) {
                            modelo.addRow(new Object[]{resultado.getInt("id"), resultado.getString(buscarCampo)});
                            hayDatos = true;
                        }
                        if (hayDatos) {
                            salida.setText("Contactos del campo " + campo.getText() + " listados.");
                        } else {
                            salida.setText("No se encontraron contactos del campo " + campo.getText() + ".");
                        }
                    } catch (SQLException ex) {
                        salida.setText("Error al listar contactos por el campo.");
                    }
                } else {
                    salida.setText("Por favor ingresa un campo válida para listar. (id, nombres, apellidos, telefono, direccion o email)");
                }
            } else {
                salida.setText("Por favor ingresa un campo para listar.");
            }
        } else {
            salida.setText("Error conexión incorrecta.");
        }
    }//GEN-LAST:event_ListarCampoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pantalla().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuscarApellido;
    private javax.swing.JButton BuscarId;
    private javax.swing.JButton BuscarNombre;
    private javax.swing.JButton ListarAlfa;
    private javax.swing.JButton ListarCalles;
    private javax.swing.JButton ListarCampo;
    private javax.swing.JButton ListarCarreras;
    private javax.swing.JButton ListarCiudades;
    private javax.swing.JButton ListarId;
    private javax.swing.JButton ListarIdImpar;
    private javax.swing.JButton ListarIdPar;
    private javax.swing.JButton ListarPrefijo;
    private javax.swing.JButton agregar;
    private javax.swing.JTextField apellido;
    private javax.swing.JTextField apellidos;
    private javax.swing.JButton borrar;
    private javax.swing.JTextField campo;
    private javax.swing.JButton cerrar;
    private javax.swing.JTextField ciudad;
    private javax.swing.JButton consultar;
    private javax.swing.JTextField direccion;
    private javax.swing.JButton editar;
    private javax.swing.JTextField email;
    private javax.swing.JTextField idBuscar;
    private javax.swing.JTextField idFin;
    private javax.swing.JTextField idInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lapellidos;
    private javax.swing.JLabel ldireccion;
    private javax.swing.JLabel lemail;
    private javax.swing.JLabel lnombres;
    private javax.swing.JLabel ltelefono;
    private javax.swing.JTextField nombre;
    private javax.swing.JTextField nombres;
    private javax.swing.JTextField prefijo;
    private javax.swing.JTextArea salida;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField telefono;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
